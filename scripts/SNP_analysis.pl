#! /usr/bin/perl

use Bio::SeqIO;
use Getopt::Long;
use File::Basename;
use Cwd;
use strict;

my $workingDir=getcwd();
my $usage = qq{
Usage: $0 -genbank <ref_Genbankfile> -SNP <SNPs_file> -format [nucmer | vcf] -output <outputDir>
          # format "nucmer" is generated by show-snps -CT
          # format "vcf is Variant Call Format 4.1
          # note: make sure the genbank LOCUS match with the reference id in snps file. 
          
};
my $debug=0;
my ($Genbankfile, $SNPs_file, $format);
my $outDir=$workingDir;
GetOptions('genbank=s'=>\$Genbankfile,
	       'SNP=s'=>\$SNPs_file,
	       'format=s'=>\$format,
               'output=s' =>\$outDir,
               'verbose' =>\$debug,
	   )||die $usage;
die $usage if (!$Genbankfile or !$SNPs_file or !$format);

my ($basename,$dir,$ext)= fileparse($SNPs_file, qr/\.[^.]*/);


open (IN, $SNPs_file) or die "$!";
my @SNPs_file=<IN>;
close IN;


my $inseq = Bio::SeqIO->new(-file => $Genbankfile);

my $myCodonTable   = Bio::Tools::CodonTable->new();
open (OUT ,">$outDir/$basename.SNPs_report.txt") or die "$!";
print OUT "Chromosome\tSNP_position\tRef_codon\tSub_codon\taa_Ref\taa_Sub\tSynonymous\tProduct\tCDS_start\tCDS_end\tCDS_strand\n";
open (OUT2, ">$outDir/$basename.Indels_report.txt") or die "$!";
if ($format =~ /vcf/i)
{
   print  OUT2 "Chromosome\tINDEL_position\tRef_Seq\tIndel_seq\tLength\tType\tProduct\tCDS_start\tCDS_end\n";

}
else
{
   print  OUT2 "Chromosome\tINDEL_position\tSequence\tLength\tType\tProduct\tCDS_start\tCDS_end\n";
}

while (my $seq = $inseq->next_seq){  # read Genbank
  my $n;
  my %CDS;
  my %indel;
  my %snps;
  my %nucmerInsertSkip;
  my $Locus_id = $seq->display_id();
  my %skip_line;
  my $genome_seq = $seq->seq();
  my $genome_len = $seq->length;
  my ($output_aa, $output_contig, $fig_id, 
      $genome_id, $project, $fig_contig_id, $contig_id);
  for my $feat_object ($seq->get_SeqFeatures){
    my $fig_id; 
    my $product=""; 
    my $locus_tag="";
    my $aa_Seq="";
    my $note="";
    my @start;
    my @end;
    if ($feat_object->primary_tag eq "CDS"){
      $n++;
      if ( $feat_object->location->isa('Bio::Location::SplitLocationI'))
      {
         for my $location ( $feat_object->location->sub_Location ) {
             push @start, $location->start;
             push @end, $location->end;
         }
      }
      else
      {
          push  @start, $feat_object->location->start;
          push  @end,  $feat_object->location->end;
      }
      foreach my $index(0..$#start)
      {
          my $start = $start[$index];
          my $end = $end[$index];
          my $nt_Seq = $feat_object->seq()->seq;
          my $strand = $feat_object->location->strand;
          #my $aa_Seq_tmp = $feat_object->get_tag_values("translation");
          #$aa_Seq = join('',$feat_object->get_tag_values("translation")) if ($aa_Seq_tmp);
          eval { $product = join('',$feat_object->get_tag_values("product")); }; warn $@ if ($@ && $debug);
          eval { $note = join('',$feat_object->get_tag_values("note")); }; warn $@ if ($@ && $debug);
          eval { $locus_tag = join('',$feat_object->get_tag_values("locus_tag")); }; warn $@ if ($@ && $debug);
          $product = $note if (!$product);
          $product = "Unknown" if (!$product);
          $product = "$locus_tag:$product" if ($locus_tag);
          $CDS{$Locus_id}->{start}=$start;
          $CDS{$Locus_id}->{end}=$end;
          $CDS{$Locus_id}->{strand}=$strand;
          open (IN,$SNPs_file);
          my $line_num=0;
          my %insertion_flag;
          my $insert_base=0;
          my $delet_base=1;
          foreach my $snps_line (@SNPs_file)
          {
             next if ($format =~ /nucmer/i && $snps_line !~ /^\d+/);
             next if ($format =~ /vcf/i && $snps_line =~ /^#/);
             $line_num++;
             next if ($skip_line{$line_num});
             chomp $snps_line;
             my $codon;
             my $ref_aa;
             my $ref_codon;
             my $snp_aa;
             my $snp_codon;
             my $tmp;
             my $snp_quality;
             my $vcf_info;
             my $vcf_info2;
             my ($ref_pos,$ref_base,$snp,$snp_pos,$buff,$dist,$ref_direction,$snp_direction,$ref_id,$query_id);
             if ($format =~ /nucmer/i) 
             {
                 ($ref_pos,$ref_base,$snp,$snp_pos,$buff,$dist,$ref_direction,$snp_direction,$ref_id,$query_id)=split /\t/,$snps_line;
             }
             elsif ($format =~ /vcf/i)
             {
                 ($ref_id,$ref_pos,$tmp, $ref_base,$snp,$snp_quality,$tmp,$vcf_info, $vcf_info2,$tmp)=split /\t/,$snps_line;
             }
             else
             { 
                 print STDERR "Format is required and either nucmer(show-snps -CT) or vcf.\n";
                 exit;
             }
             next if ($ref_id !~ /$Locus_id/i and $format =~ /nucmer/i);
             next if ($ref_id !~ /$Locus_id/i and $format =~ /vcf/i);
             if ($start <= $ref_pos && $end >= $ref_pos) # in CDS
             {
                 $skip_line{$line_num}=1;
                 if ($ref_base eq "." or $snp eq "." or $vcf_info =~ /INDEL/)  #insertion/deletion
                 #if ($ref_base eq "." or $snp eq "." or $vcf_info =~ /INDEL/ or length ($snp) != length($ref_base))  #insertion/deletion
                 {
                    my $type;
                    
                    if ($ref_base eq '.' or length ($snp)>length($ref_base)){$type ="Insertion"};
                    if ($snp eq '.' or length ($snp)<length($ref_base)){$type ="Deletion"};
                    
                    if ($format =~ /vcf/i)
                    {
                        $indel{$ref_pos}->{ref_seq}=$ref_base;
                        $indel{$ref_pos}->{indel_seq}=$snp;
                    }
                    else
                    { 
                      if ($type eq "Deletion")
                      {
                        if ($indel{$ref_pos})
                        {
                        }else{
                           if ($indel{$ref_pos-1})
                           {
                              $indel{$ref_pos}->{skip}=1;
                              $ref_pos = $ref_pos - $delet_base;
                              $delet_base++;
                           }else 
                           {
                              $delet_base=1;
                           }
                              $indel{$ref_pos}->{seq}.= $ref_base;
                              $indel{$ref_pos}->{direction}=$ref_direction;
                        }
                      }
                      else
                      { 
                        if (!$nucmerInsertSkip{$snp_pos})
                        {
                          $indel{$ref_pos}->{seq}.=$snp;
                        }
                        $nucmerInsertSkip{$snp_pos}=1;
                        $indel{$ref_pos}->{direction}=$snp_direction;
                        
                      }
                      
                    }
                    $indel{$ref_pos}->{type}=$type;
                    $indel{$ref_pos}->{prodcut}=$product;
                    $indel{$ref_pos}->{cds_s}=$start;
                    $indel{$ref_pos}->{cds_e}=$end;
                    $indel{$ref_pos}->{Locus}=$ref_id;
                 }
                 else #SNPs
                 { 
                    my @snps;
                    $snps{$ref_pos}->{snp_codon}="";
                    if (length($snp)>1) {@snps=split /,/,$snp;}else {@snps=$snp;}
                    foreach my $snp (@snps){
                      $snps{$ref_pos}->{snp_base}=$snp;
                      my $mod = ($ref_pos-$start+1) % 3;
                      if ($mod % 3 == 0) # third base
                      {
                         $codon=substr($genome_seq,$ref_pos-3,3);
                         $ref_codon=$codon;
                         if ($snps{$ref_pos-2})
                         {
                              if ($snps{$ref_pos-1})
                              {
                                $snp_codon=$snps{$ref_pos-2}->{snp_base}.$snps{$ref_pos-1}->{snp_base}.$snp;
                              }
                              else
                              {
                                $snp_codon=$snps{$ref_pos-2}->{snp_base}.substr($ref_codon,1,1).$snp;
                              }
                              #delete $snps{$ref_pos};
                              $snps{$ref_pos}->{ref_aa}="Merged with SNP ". ($ref_pos-2);
                              $snps{$ref_pos}->{product}="";
                              $snps{$ref_pos}->{ref_codon}=$ref_base;
                              $snps{$ref_pos}->{snp_codon}=$snp;
                              $ref_pos = $ref_pos-2;
                         }
                         else
                         {
                           substr($codon,2,1,$snp);
                           $snp_codon=$codon;
                         }
                        # print $ref_codon,"\t",$snp_codon,"\n";
                       }
                       elsif ($mod % 3 == 1) # first base
                       {
                         $codon=substr($genome_seq,$ref_pos-1,3);
                         $ref_codon=$codon;
                         substr($codon,0,1,$snp);
                         $snp_codon=$codon;
                        #print $ref_codon,"\t",$snp_codon,"\n";
                       }
                       elsif ($mod % 3 == 2) # sedond base
                       {
                         $codon=substr($genome_seq,$ref_pos-2,3);
                         $ref_codon=$codon;
                         if ($snps{$ref_pos-1})
                         {
                              $snp_codon=$snps{$ref_pos-1}->{snp_base}.$snp.substr($ref_codon,2,1);
                              #delete $snps{$ref_pos};
                              $snps{$ref_pos}->{ref_aa}="Merged with SNP ".($ref_pos-1);
                              $snps{$ref_pos}->{product}="";
                              $snps{$ref_pos}->{ref_codon}=$ref_base;
                              $snps{$ref_pos}->{snp_codon}=$snp;
                              $ref_pos = $ref_pos-1;
                         }
                         else
                         {
                           substr($codon,1,1,$snp);
                           $snp_codon=$codon;
                         }
                         #print $ref_codon,"\t",$snp_codon,"\n";
                       }
                    
                    if ($strand != 1)
                    { 
                     $ref_codon=ReverseComplement($ref_codon);
                     $snp_codon=ReverseComplement($snp_codon);
                    } 
                    $ref_aa= $myCodonTable->translate($ref_codon);
                    $snp_aa= $myCodonTable->translate($snp_codon);
    
                    my $synonymous = ($ref_aa eq $snp_aa)? "Yes":"No";
                    
                    if (scalar (@snps)>1){
                      $snps{$ref_pos}->{snp_aa}.=$snp_aa.",";
                      $snps{$ref_pos}->{synonymous}.=$synonymous.",";
                      $snps{$ref_pos}->{snp_codon}.=$snp_codon.",";
                    }
                    else
                    {
                      $snps{$ref_pos}->{snp_aa}=$snp_aa;
                      $snps{$ref_pos}->{synonymous}=$synonymous;
                      $snps{$ref_pos}->{snp_codon}=$snp_codon;
                    }
                    $snps{$ref_pos}->{ref_codon}=$ref_codon;
                    $snps{$ref_pos}->{ref_aa}=$ref_aa;
                    $snps{$ref_pos}->{product}=$product;
                    $snps{$ref_pos}->{cds_s}=$start;
                    $snps{$ref_pos}->{cds_e}=$end;
                    $snps{$ref_pos}->{Locus}=$ref_id;
                    $snps{$ref_pos}->{strand}=$strand;
                   # print OUT $Locus_id,"\t",$ref_pos,"\t",$ref_codon,"\t",$snp_codon,"\t",$ref_aa,"\t",$snp_aa,"\t",$synonymous,"\t",$product,"\t",$start, "\t",$end,"\n";
                   } # foreach my $snp (@snps){
                 }
             } # end in CDS
             elsif ($start > $ref_pos or $end < $ref_pos)   # not in CDS
             {
                
                  #$skip_line{$line_num};
                  next if ($snps{$ref_pos});
                  if ($ref_base eq "." or $snp eq "." or $vcf_info =~ /INDEL/)  #insertion/deletion
                # if ($ref_base eq "." or $snp eq "." or $vcf_info =~ /INDEL/ or length ($snp) != length($ref_base))  #insertion/deletion
                 {
                    my $type;
                    
                    if ($ref_base eq '.' or length ($snp)>length($ref_base)){$type ="Insertion"};
                    if ($snp eq '.' or length ($snp)<length($ref_base)){$type ="Deletion"};
             
                    if ($format =~ /vcf/i)
                    {
                        next if ($indel{$ref_pos});
                        $indel{$ref_pos}->{ref_seq}=$ref_base;
                        $indel{$ref_pos}->{indel_seq}=$snp;
                    }
                    else
                    { 
                      if ($type eq "Deletion")
                      {
                        next if ($indel{$ref_pos});
                        if ($indel{$ref_pos-1})
                        {
                          $indel{$ref_pos}->{skip}=1;
                          $ref_pos = $ref_pos - $delet_base;
                          $delet_base++;
                        }else 
                        {
                          $delet_base=1;
                        } 
                        $indel{$ref_pos}->{seq}.= $ref_base;
                        $indel{$ref_pos}->{direction}=$ref_direction;
                      }
                      else  # INSERTION
                      {
                        next if ($nucmerInsertSkip{$snp_pos});
                        $nucmerInsertSkip{$snp_pos}=1;
                        $indel{$ref_pos}->{seq}.=$snp;
                        $indel{$ref_pos}->{direction}=$snp_direction;
                      }
                    }
                    $indel{$ref_pos}->{type}=$type;
                    $indel{$ref_pos}->{prodcut}="Intergenic region";
                    $indel{$ref_pos}->{cds_s}="";
                    $indel{$ref_pos}->{cds_e}="";
                    $indel{$ref_pos}->{Locus}=$ref_id;
                 }
                 else # no in CDS SNPs
                 {  
                   
                   # my @snps;
                  #  if (length($snp)>1) {@snps=split /,/,$snp;}else {@snps=$snp;}
                  #foreach my $snp (@snps){
                   # if (scalar (@snps)>1){
                     # $snps{$ref_pos}->{snp_codon}=$snp.",";
                    #}
                    #else
                    #{
                      $snps{$ref_pos}->{snp_codon}=$snp;
                    #}
                  #}
                    $snps{$ref_pos}->{snp_aa}="";
                    $snps{$ref_pos}->{synonymous}="";
                    $snps{$ref_pos}->{ref_codon}=$ref_base;
                    $snps{$ref_pos}->{ref_aa}="";
                    $snps{$ref_pos}->{product}="Intergenic region";
                    $snps{$ref_pos}->{cds_s}="";
                    $snps{$ref_pos}->{cds_e}="";
                    $snps{$ref_pos}->{Locus}=$ref_id;
                    $snps{$ref_pos}->{strand}="";
                 }
                 
             }# not in CDS
            
          } # end  foreach (my $snps_line= <IN>)
          
          
          
        }#end if CDS/RNA
        if ($feat_object->primary_tag eq "source"){
          #$genome_id = join('',$feat_object->get_tag_values("genome_id"));
          #$project = join('',$feat_object->get_tag_values("project"));
          #($contig_id) = $Locus_id =~ /(\S+)/;
          #$fig_contig_id = "$genome_id.contig.$contig_id";
          #$output_contig = ">$fig_contig_id $project\n$contig_seq\n";
        }
    } #  foreach my $index(0..$#start)
  }# end for  my $feat_object

  my %codon_product;
  foreach my $pos (sort {$a <=> $b} keys %snps)
  {
       my $locus = $snps{$pos}->{Locus};
       my $ref_codon = $snps{$pos}->{ref_codon};
       my $snp_codon = $snps{$pos}->{snp_codon};
       my $product = $snps{$pos}->{product};
       my $ref_aa = $snps{$pos}->{ref_aa};
       my $snp_aa = $snps{$pos}->{snp_aa};
       my $synonymous = $snps{$pos}->{synonymous};
       my $strand = $snps{$pos}->{strand};
       $snp_aa =~ s/,$//;
       $synonymous =~ s/,$//;
       $snp_codon =~ s/,$//;
       
       print OUT  $locus,"\t",
                  $pos,"\t",
                  $ref_codon,"\t",
                  $snp_codon,"\t",
                  $ref_aa,"\t",
                  $snp_aa,"\t",
                  $synonymous,"\t",
                  $product,"\t",
                  $snps{$pos}->{cds_s},"\t",
                  $snps{$pos}->{cds_e},"\t",
                  $strand,"\n";
  }
  
  
  foreach my $pos(sort {$a <=> $b} keys %indel)
  {
      next if ($indel{$pos}->{skip});
      my $seq = ($indel{$pos}->{direction} == -1)?reverse($indel{$pos}->{seq}):$indel{$pos}->{seq};
      print  OUT2 $indel{$pos}->{Locus},"\t",
                 $pos, "\t";
      if ($format =~ /vcf/i)
      {
         my $ref_seq = $indel{$pos}->{ref_seq};
         my $indel_seq = $indel{$pos}->{indel_seq};
         print OUT2 $ref_seq,"\t",
                   $indel_seq,"\t",
                   abs (length($indel_seq)-length($ref_seq)),"\t";     
      }
      else
      {
         print OUT2 $seq,"\t",
                   length($seq),"\t";
      }       
      print  OUT2 $indel{$pos}->{type},"\t",
                 $indel{$pos}->{prodcut},"\t",
             $indel{$pos}->{cds_s},"\t",
             $indel{$pos}->{cds_e},"\n";
  }


} #end while () Genbank

close OUT;
close OUT2;

sub ReverseComplement{
        my $dna = $_[0];
        my $ReverseCompSeq = reverse ($dna);
        $ReverseCompSeq =~ tr/atgcrywsmkATGCRYWSMK/tacgyrswkmTACGYRSWKM/;
        return($ReverseCompSeq);
}



